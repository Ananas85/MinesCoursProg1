import java.util.*;

/*
 * Les structures algébriques classiques 
 */

interface SemiGroupeAdd<T> {
    T somme(T x);
}

interface MonoideAdd<T> extends SemiGroupeAdd<T> {
    T zero();
}

interface GroupeAdd<T> extends MonoideAdd<T> {
    T oppose();
}

interface SemiGroupeMul<T> {
    T produit(T x);
}

interface MonoideMul<T> extends SemiGroupeMul<T> {
    T un();
}

interface GroupeMul<T> extends MonoideMul<T> {
    T inverse();
}

interface Anneau<T> extends GroupeAdd<T>, SemiGroupeMul<T> {
}

interface AnneauUnitaire<T> extends Anneau<T>, MonoideMul<T> {
}

interface Corps<T> extends AnneauUnitaire<T>, GroupeMul<T> {
}

/*
 * Exercice 1 : module de calculs
 */

class Calculs {
    /*
     * Question 1.1 : division
     */
    public static <T extends GroupeMul<T>> // 1pt
			     T division(T x, T y) {
	return x.produit(y.inverse()); // 1pt
    }

    /*
     * Question 1.2 : produit généralisé
     */
    public static <T extends MonoideMul<T>> // 1pt
			     T produitNAire(List<T> l) {
	if (l.isEmpty())
	    throw new IllegalArgumentException();
	T tete = l.get(0);
	if (!tete.equals(tete.un()))
	    throw new IllegalArgumentException();
	T r = tete;
	for (T e : l) {
	    r = r.produit(e);
	}
	return r; // 2pt
    }
}

/*
 * Exercice 2 : les entiers naturels
 */

interface FabriqueNats<T> {
    T creer(); // Crée un entier valant zéro

    T creer(Nat pred); // Crée un entier naturel égal au successeur de pred

}

/*
 * Question 2.1 : l'interface Nat
 */
interface Nat 
    extends FabriqueNats<Nat>, MonoideAdd<Nat>, MonoideMul<Nat> // 1pt
{
    boolean estZero(); // Teste à zéro l'entier naturel

    Nat predecesseur(); // Donne le prédécesseur s'il existe

    int val(); // Convertit l'entier naturel en int

    boolean equals(Object o); // Renvoie false
    // si o n'est pas de type Nat,
    // teste l'égalité des entiers naturels sinon

    String toString(); // Représente l'entier renvoyé par val
}

interface NatInductif extends Nat // 1pt
{
default Nat creer() {
    return Zero.SINGLETON; // 2.2 : 1pt
}

default Nat creer(Nat pred) {
    return new Succ(pred); // 2.3 : 1pt
}

default Nat zero() {
    return creer(); // 1pt
}

default Nat un() {
    return creer(zero()); // 1pt
}

	
}

/*
 * Question 2.2 : cas Zero du patron "Composite" ("Singleton") 
 */

enum Zero implements NatInductif {
    SINGLETON; // 1pt (ensemble)

    // Accesseurs : 1pt
    public boolean estZero() {
	return true;
    }

    public Nat predecesseur() {
	throw new UnsupportedOperationException();
    }

    public int val() {
	return 0;
    }
    // Calculs : 1pt
    public Nat somme(Nat x) {
	return x;
    }


    public Nat produit(Nat x) {
	return this;
    }

    // Représentation : 1pt
    public String toString() {
	return Integer.toString(val());
    }
}

/*
 * Question 2.3 : cas Succésseur du patron "Composite" 
 */

final class Succ implements NatInductif // 1pt
{
    // 1pt 
    private Nat pred;

    public Succ(Nat pred) {
	this.pred = pred;
    }
    // 1pt
    public boolean estZero() {
	return false;
    }

    public Nat predecesseur() {
	return pred;
    }

    public int val() {
	return 1 + predecesseur().val();
    }
	
    // 1pt (récursif)
    public Nat somme(Nat x) {
	return creer(predecesseur().somme(x));
    }

    public Nat produit(Nat x) {
	return x.somme(predecesseur().produit(x));
    }

    // 1pt (réc.)
    public boolean equals(Object o) {
	if (!(o instanceof Nat))
	    return false;
	Nat x = (Nat) o;
	if (x.estZero())
	    return false;
	return predecesseur().equals(x.predecesseur());
    }
    // 1pt
    public String toString() {
	return Integer.toString(val());
    }
}

final class Couple<T1, T2> {
    public Couple(T1 c1, T2 c2) {
	pi1 = c1;
	pi2 = c2;
    }

    public final T1 pi1;
    public final T2 pi2;
}

interface Representation<Rep> {
    Rep val();
}

interface FabriqueRelatifs<T, N> {
    T creer(N positif, N negatif); // Crée un entier relatif correspondant
    // à la différence positif - négatif
}

/*
 * Question 3.1 : interface Z
 */

interface Z 
    extends Representation<Couple<Nat, Nat>>, FabriqueRelatifs<Z, Nat>,
	    AnneauUnitaire<Z> // 1pt
{
    boolean equals(Object o); // Renvoie false
    // si o n'est pas de type Z,
    // teste l'égalité des entiers relatifs sinon

    String toString(); // Représente l'entier relatif
    // sous la forme d'une différence
}

/*
 * Question 3.2 : implémentation de l'interface Z
 */

class Relatif implements Z {
    private Nat positif;
    private Nat negatif;

    public Relatif() {
	this(Zero.SINGLETON, Zero.SINGLETON); // 1pt
    }

    public Relatif(Nat positif, Nat negatif) {
	// 1pt
	this.positif = positif;
	this.negatif = negatif;
    }
    // 1pt
    public Couple<Nat, Nat> val() {
	return new Couple<Nat, Nat>(positif, negatif);
    }
    // 1pt
    public Z creer(Nat positif, Nat negatif) {
	return new Relatif(positif, negatif);
    }
    // 1pt
    public Z somme(Z x) {
	Couple<Nat, Nat> rep = this.val();
	Couple<Nat, Nat> repX = x.val();
	Nat positif = rep.pi1.somme(repX.pi1);
	Nat negatif = rep.pi2.somme(repX.pi2);
	return creer(positif, negatif);
    }
    // 1pt
    public Z zero() {
	Couple<Nat, Nat> rep = this.val();
	return creer(rep.pi1, rep.pi1);
    }
    // 1pt
    public Z oppose() {
	Couple<Nat, Nat> rep = this.val();
	return creer(rep.pi2, rep.pi1);
    }
    // 1pt
    public Z produit(Z x) {
	Couple<Nat, Nat> rep = this.val();
	Couple<Nat, Nat> repX = x.val();
	Nat positif = rep.pi1.produit(repX.pi1)
	    .somme(rep.pi2.produit(repX.pi2));
	Nat negatif = rep.pi2.produit(repX.pi1)
	    .somme(rep.pi1.produit(repX.pi2));
	return creer(positif, negatif);
    }
    // 1pt
    public Z un() {
	Couple<Nat, Nat> rep = this.val();
	return creer(rep.pi1.un(), rep.pi1.zero());
    }
    // 1pt
    public boolean equals(Object o) {
	if (!(o instanceof Z))
	    return false;
	Z x = (Z) o;
	Couple<Nat, Nat> rep = this.val();
	Couple<Nat, Nat> repX = x.val();
	return rep.pi1.somme(repX.pi2).equals(rep.pi2.somme(repX.pi1));
    }
    // 1pt
    public String toString() {
	return val().pi1 + " - " + val().pi2;
    }
}

/*
 * Question 3.4 : symétrisation
 */

interface Symetrise<T extends MonoideAdd<T> & MonoideMul<T>> // 1pt
    extends // 1pt
    Representation<Couple<T, T>>, 
    FabriqueRelatifs<Symetrise<T>, T>, 
    AnneauUnitaire<Symetrise<T>> 
{
    boolean equals(Object o);

    String toString();
}

class Diagonale<T extends MonoideAdd<T> & MonoideMul<T>> // 1pt
    implements Symetrise<T> // 1pt
{
    private T positif;
    private T negatif;

    public Diagonale(T positif, T negatif) {
	this.positif = positif;
	this.negatif = negatif;
    }
    // 1pt
    public Couple<T, T> val() {
	return new Couple<T, T>(positif, negatif);
    }
    // 1pt
    public Symetrise<T> creer(T positif, T negatif) {
	return new Diagonale<T>(positif, negatif);
    }
    // 1pt
    public Symetrise<T> somme(Symetrise<T> x) {
	Couple<T, T> rep = this.val();
	Couple<T, T> repX = x.val();
	T positif = rep.pi1.somme(repX.pi1);
	T negatif = rep.pi2.somme(repX.pi2);
	return creer(positif, negatif);
    }
    // 1pt
    public Symetrise<T> zero() {
	Couple<T, T> rep = this.val();
	return creer(rep.pi1, rep.pi1);
    }
    // 1pt
    public Symetrise<T> oppose() {
	Couple<T, T> rep = this.val();
	return creer(rep.pi2, rep.pi1);
    }
    // 1pt
    public Symetrise<T> produit(Symetrise<T> x) {
	Couple<T, T> rep = this.val();
	Couple<T, T> repX = x.val();
	T positif = rep.pi1.produit(repX.pi1).somme(
		    rep.pi2.produit(repX.pi2));
	T negatif = rep.pi2.produit(repX.pi1).somme(
		    rep.pi1.produit(repX.pi2));
	return creer(positif, negatif);
    }
    // 1pt
    public Symetrise<T> un() {
	Couple<T, T> rep = this.val();
	return creer(rep.pi1.un(), rep.pi1.zero());
    }
    // 1pt
    public boolean equals(Object o) {
	try {
	    @SuppressWarnings("unchecked")
		Symetrise<T> x = (Symetrise<T>) o;
	    Couple<T, T> rep = this.val();
	    Couple<T, T> repX = x.val();
	    return rep.pi1.somme(repX.pi2).equals(rep.pi2.somme(repX.pi1));
	} catch (ClassCastException e) {
	    return false;
	}
    }
    // 1pt
    public String toString() {
	Couple<T, T> rep = this.val();
	return rep.pi1.toString() + " - " + rep.pi2.toString();
    }
}

public class Test {
    public static void main(String[] args) {
	/*
	 * Question 2.4 : test de Zero, Succ et Nat
	 */

	/* Nat */
	System.out.println("******* Test de Nat *******");
	// 1pt
	FabriqueNats<Nat> fab = Zero.SINGLETON;
	// 1pt
	Nat zero = fab.creer();
	Nat un = fab.creer(zero);
	Nat deux = fab.creer(un);
	Nat quatre = deux.somme(deux);
	Nat huit = deux.produit(quatre);

	System.out.println("zéro : " + zero);
	System.out.println("un : " + un);
	System.out.println("deux : " + deux);
	System.out.println("quatre : " + quatre);
	System.out.println("huit : " + huit);
	// non demandé
	System.out.println("égal : " + zero.equals(un.zero()));
	System.out.println("égal : " + un.equals(un.un()));

	/*
	 * Question 3.3 : test de Z
	 */

	/* Z */
	System.out.println("******* Test de Z *******");
	// 1pt
	FabriqueRelatifs<Z, Nat> fabZ = new Relatif();
	// 1pt
	Z zeroZ = fabZ.creer(zero, zero);
	Z moinsUn = fabZ.creer(un, deux);
	Z moinsDeux = fabZ.creer(deux, quatre);
	Z quatreZ = moinsDeux.produit(moinsDeux);
	System.out.println("zéro Z : " + zeroZ);
	System.out.println("moins un : " + moinsUn);
	System.out.println("moins deux : " + moinsDeux);
	System.out.println("quatre Z : " + quatreZ);
	// Non demandé
	System.out.println("égal : " + moinsDeux.equals(moinsDeux));
	System.out.println("inégal : " + !moinsDeux.equals(quatreZ));

	/*
	 * Question 3.5 : test du symétrisé de Nat
	 */
	/* Symetrise<Nat> */
	System.out.println("******* Test de Symetrise<Nat> *******");
	// 1pt
	FabriqueRelatifs<Symetrise<Nat>, Nat> fabS = 
	    new Diagonale<Nat>(zero, zero);
	// 1pt
	Symetrise<Nat> zeroS = fabS.creer(zero, zero);
	Symetrise<Nat> moinsUnS = fabS.creer(un, deux);
	Symetrise<Nat> moinsDeuxS = fabS.creer(deux, quatre);
	Symetrise<Nat> quatreS = moinsDeuxS.produit(moinsDeuxS);
	System.out.println("zéro S: " + zeroS);
	System.out.println("moins un S: " + moinsUnS);
	System.out.println("moins deux S: " + moinsDeuxS);
	System.out.println("quatre S: " + quatreS);
	// non demandé
	System.out.println("un S: " + moinsUnS.oppose());
	System.out.println("égal S: " + moinsDeuxS.equals(moinsDeuxS));
	System.out.println("inégal S: " + !moinsDeuxS.equals(quatreS));

    }
}




